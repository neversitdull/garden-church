---
import Container from "@components/layout/Container.astro";
import Logo from "@components/ui/Logo.astro";
import CloseIcon from "@components/icons/CloseIcon.astro";
import { sanityClient } from "../../lib/sanityClient";
import { NAVIGATION_QUERY } from "../../lib/queries";
import { buildUrl } from "../../lib/utils";
import type { NavigationData } from "../../lib/utils";

// Fetch navigation data from Sanity
const navigationData =
  await sanityClient.fetch<NavigationData>(NAVIGATION_QUERY);
const navItems = navigationData?.navLinks || [];
---

<div
  class="fixed inset-0 z-[100] flex flex-col bg-black text-white overflow-y-auto overscroll-contain"
  x-show="open"
  x-cloak
  @click.outside="open = false"
  @keydown.escape.window="open = false">
  <header class="fixed z-[60] w-full h-20">
    <Container class="h-full">
      <div
        class="flex items-center justify-between h-full font-sans text-lg border-b border-gray-800">
        <a href="/">
          <Logo height="32" ariaLabel="Garden Church Logo" />
        </a>
        <button @click="open = false" aria-label="Close Menu">
          <CloseIcon ariaLabel="Close Menu" />
        </button>
      </div>
    </Container>
  </header>

  <Container class="flex flex-col h-full pt-20">
    <nav
      class="flex flex-col items-start justify-center flex-1 gap-8 text-2xl font-medium">
      {
        navItems.map((item) => {
          const hasChildren = item.children && item.children.length > 0;
          const itemUrl = buildUrl(item);

          if (hasChildren) {
            return (
              <div class="w-full" x-data="{ expanded: false }">
                <button
                  @click="expanded = !expanded"
                  class="flex items-center justify-between w-full text-left transition-colors hover:text-gray-300">
                  <span>{item.label}</span>
                  <span
                    class="ml-2 transition-transform duration-200"
                    x-bind:class="expanded ? 'rotate-180' : 'rotate-0'">
                    v
                  </span>
                </button>
                <div x-show="expanded" x-collapse class="mt-4 ml-4 space-y-4">
                  {item.children?.map((child) => (
                    <a
                      href={buildUrl(child)}
                      class="block text-lg transition-colors hover:text-gray-300"
                      @click="open = false">
                      {child.label}
                    </a>
                  ))}
                </div>
              </div>
            );
          } else {
            return (
              <a
                href={itemUrl}
                class="transition-colors hover:text-gray-300"
                @click="open = false">
                {item.label}
              </a>
            );
          }
        })
      }
    </nav>
  </Container>
</div>
